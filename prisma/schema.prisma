// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id         Int            @id @default(autoincrement())
  slug       String         @unique @default(uuid())
  title      String         @unique
  content    String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  date       DateTime?
  images     Image[]
  tags       String[]       @default([])
  author     User?          @relation(fields: [authorId], references: [id])
  authorId   String?
  visibility BlogVisibility @default(PRIVATE)

  @@map("blog")
}

enum BlogVisibility {
  PUBLIC
  FRIENDS
  PRIVATE
}

model Image {
  id        Int      @id @default(autoincrement())
  blog      Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    Int?
  name      String
  url       String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  @@map("image")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  image         String?
  role          Role         @default(USER)
  friends       Friendship[] @relation("friends")
  friendOf      Friendship[] @relation("friendOf")
  images        Image[]

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

model Friendship {
  requester   User             @relation("friendOf", fields: [requesterId], references: [id])
  requesterId String
  recipient   User             @relation("friends", fields: [recipientId], references: [id])
  recipientId String
  createdAt   DateTime         @default(now())
  status      FriendshipStatus @default(PENDING)

  @@id([requesterId, recipientId])
  @@map("friendship")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}
